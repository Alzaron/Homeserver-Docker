secrets:
  db_password:
    file: $SECRETSDIR/db_password
  db_root_password:
    file: $SECRETSDIR/db_root_password

networks:
  web:
    name: web
  proxy:
    name: proxy
    ipam:
      config:
        - subnet: $PROXY_SUBNET
  

      ######################  PLEX   ####################
      
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    network_mode: host
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - VERSION=docker
      - PLEX_CLAIM= # 
    volumes:
      - $CONFIGDIR/plex:/config
      - $TVDIR:/tv
      - $MOVIEDIR:/movies
    restart: unless-stopped
      

    ################    WIREGUARD    #################
  wireguard:
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - SERVERURL=auto #optional
      - SERVERPORT=$WIREGUARD_PORT
      - PEERS=1 #optional
      - INTERNAL_SUBNET=$WIREGUARD_SUBNET #optional   
      - PEERDNS=auto #optional
    volumes:
      - $CONFIGDIR/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - $WIREGUARD_PORT:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

    ##################  JELLYFIN  ################
    #     #
    #  jellyfin:
    #    image: lscr.io/linuxserver/jellyfin
    #    container_name: jellyfin
    #    environment:
    #      - PUID=$PUID
    #      - PGID=$PGID
    #      - TZ=$TZ
    #    volumes:
    #      - $CONFIGDIR/jellyfin:/config
    #      - $TVDIR:/data/tvshows
    #      - $MOVIEDIR:/data/movies
    #    ports:
    #      - $JELLYFIN_PORT:8096
    #    restart: unless-stopped
    #

    ##################   CALIBRE   ###############

    #  calibre:
    #    image: lscr.io/linuxserver/calibre
    #    container_name: calibre
    #    environment:
    #      - PUID=$PUID
    #      - PGID=$PGID
    #      - TZ=$TZ
    #      - PASSWORD= #optional
    #      - CLI_ARGS= #optional
    #    volumes:
    #      - $CONFIGDIR/calibre:/config
    #        
    #    ports:
    #      - $CALIBRE_8080_PORT:8080
    #      - $CALIBRE_8081_PORT:8081
    #    restart: unless-stopped
    #  calibre-web:
    #    image: lscr.io/linuxserver/calibre-web
    #    container_name: calibre-web
    #    environment:
    #      - PUID=$PUID
    #      - PGID=$PGID
    #      - TZ=$TZ
    #      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
    #        #   - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #optional
    #    volumes:
    #      - $CONFIGDIR/calibre:/config
    #      - $BOOKDIR/library:/books
    #    ports:
    #      - $CALIBREWEB_PORT:8083
    #    restart: unless-stopped
    #  labels:
    #  - traefik.enable=true
    #  - traefik.http.routers.calibre.rule=Host(`calibre.$DOMAIN`)
    #  - traefik.http.routers.calibre.entrypoints=https
    #  - traefik.http.services.calibre.loadbalancer.server.port=$CALIBRE_PORT
    #
    #
   ##############  SYNCTHING   ##################

  syncthing:
    image: lscr.io/linuxserver/syncthing
    container_name: syncthing
    hostname: syncthing #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - $CONFIGDIR/syncthing:/config
      - $DATA1:/data1
      - $DATA2:/data2
    ports:
      - $SYNCTHING_PORT:8384
      - $SYNCTHING_22000_PORT:22000/tcp
      - $SYNCTHING_22000_PORT:22000/udp
      - $SYNCTHING_21027_PORT:21027/udp
    restart: unless-stopped
    networks:
      - proxy
      - web
      ##################### TRAEFIK ###########################
  traefik:
    image: traefik:latest
    restart: always
    container_name: traefik
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      - --api=true
      - --api.insecure=true
      - --api.dashboard=true
      - --log=true
      - --log.level=ERROR # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
         #    - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINAME
      - --providers.docker.network=proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloud

        flare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate

    networks:
      proxy:
        ipv4_address: $IPPROX # You can specify a static IP
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $CONFIGDIR/traefik/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $CONFIGDIR/traefik/data/acme.json:/acme.json #erti you must touch this file and change permissions to 600
      - $CONFIGDIR/traefik/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_KEY
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      #  - "traefik.http.routers.traefik-rtr.middlewares=chain-oauh@file"

